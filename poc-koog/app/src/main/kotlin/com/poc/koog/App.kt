/*
 * This source file was generated by the Gradle 'init' task
 */
package com.poc.koog

import ai.koog.prompt.markdown.markdown
import com.poc.koog.agent.factory.AgentType
import com.poc.koog.agent.factory.createAgent
import com.poc.koog.utils.copyWhileAppendingToName
import kotlinx.coroutines.runBlocking
import java.io.File

val inputFileRelative = File("./test/fixture/StockPriceFetcher.kt")
val targetFileRelative = inputFileRelative.copyWhileAppendingToName(text = "_Documented", extension = "txt")

val agentUserPromptPair = mapOf(
    AgentType.Documenter to markdown {
        bulleted {
            item("Please document my code in ${inputFileRelative.path}.")
            item( "Show me how the documentated code looks like.")
            item( "Finally, save the documented code to ${targetFileRelative.path}")
        }
    },
    AgentType.FileReader to markdown {
        bulleted {
            item("Read code present in ${inputFileRelative.path}.")
            item("Add documentation to the code.")
            item("Show me how the documentated code looks like.")
        }
    }
)

fun prepareAgentAndUserPrompt(agentType: AgentType) = agentType to agentUserPromptPair[agentType]!!

fun main() = runBlocking {
    val (agentType, userPrompt) = prepareAgentAndUserPrompt(AgentType.Documenter)
    val agent = createAgent(agentType)
    val result = agent.runAndGetResult(userPrompt)
    println("Agent Response: $result")
}
